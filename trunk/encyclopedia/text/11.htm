<html><head><meta charset="utf-8"><link rel="stylesheet" type="text/css" href="..\encyclopedia.css"><script type="text/javascript" src="..\encyclopedia.js"></script></head><body onload="page();"><xmp>

Короче, у меня возникла идея сжатия текста! 

Каждый символ – это байт из восьми бит. При этом самый старший никогда не используется (нет кодов > 127). 
Если предположить, что у нас не будет второго регистра (все буквы маленькие, а заглавных нет), то нам в принципе, хватит и шести бит (не более 63 символов). Это будут 33 буквы + 10 цифр + 4 кнопки + «! ? . , … + - – ] * % / : ; » + пробел + управляющая собачка. Всего 63 штуки. 

Но это впритык. А нужно освободить немного кодов, чтобы создать управляющие символы. Их действия такие: 
– Сделать все последующие буквы заглавными; 
– Сделать все последующие буквы маленькими. 
– Сделать одну следующую букву заглавной. 

Чтобы они не увеличивали {Разницу} их можно совместить с обычными знаками препинания. Например «. ! ?» всегда могут делать следующую букву заглавной. В дополнение можно создать особый пробел, который тоже создаёт одну заглавную букву (его надо будет например использовать перед написанием имён собственный вместо обычного пробела) 

Байты будут кодироваться так: 

1111-1122 = 2222-3333 = 3344-4444 

Это три байта. И в них втиснуто четыре символа! Старшенство как есть, то бишь 
5432-1054 = 3210-5432 = 1054-3210 

Однако первый байт придётся потратить на служебные нужды, и обозначить в нём старший байт единицей, если строка кодирована нами. Чтобы наша функция не пыталась раскодировать строки, построенные «at runtime» – то есть игрой на лету (например, многие цифровые значения, которые отсутствуют в ресурсах, а вычисляются по ходу игры). 
В этом же байте можно указать отдельный флаг (функция: {читать его только если байт «наш» (старший бит = 1); иначе вообще ничего со строкой не делать и отправить как есть}), который может обозначить, что все буквы должны быть заглавные (а таких строк немало!), а ещё можно и цвет для всей строки задать (но ещё лучше определить его так: первый бит (старший) – всегда «1», второй бит «1» для заглавных и «0» для маленьких; оставшиеся шесть бит – первая буква из текста) 

Тогда в результате мы получим, что из каждых трёх символов мы возымеем четыре! И {Разница} уменьшиться почти на треть! Из 10 букв получим 13, из 20 – 26! Из 31 – 41! 

Оно того стоит? Некоторые дополнительные символы и переключатели цвета можно будет всунуть в действие «заглавных» букв. 

А ещё нам открывается диакритика! Точки над Ё и черту над Й теперь можно будет выводить НАД буквами, а не вшивать их в шрифт. То есть вместо Ё будут стоять только две точки, которые потом наша функция преобразует в последовательность «Е@i» (или вроде того), которую игра отобразит как диакритику. На {Разнице} это никак не скажется, а просто улучшит дизайн шрифта, нам не придётся уменьшать Ё, чтобы втиснуть туда точечки. 

В чём минусы метода? Нужно будет всё тщательно проверить. Переработать таблицу соответствия и очень хорошо продумать 63-кодовую кодировку. И кончено, потребуются новые программы для кодировки текста, потому что никакой Перетасовщик Символов не справится с развёртыванием битов. Плюс, нужно будет автоматизировать удаление пробелов после знаков препинания и кучу других фитчей. 
И для внедрения текста потребуется новая программа (а у нас-то по сути и ни одной нет…) Я уже придумал, как она будет работать. 
Зато вроде бы, в «яичную зону» нас совсем не понадобиться лазить, может быть в очень-очень крайних случаях. 

</xmp></body></html>